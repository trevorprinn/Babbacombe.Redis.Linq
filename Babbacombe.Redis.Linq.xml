<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Babbacombe.Redis.Linq</name>
    </assembly>
    <members>
        <member name="T:Babbacombe.Redis.Linq.RedisHashKey">
            <summary>
            Treats a Redis Hash Key as a Dictionary of string objects with string keys.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey.#ctor(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            Opens a Redis hash key.
            </summary>
            <param name="database">The Redis database.</param>
            <param name="key">The Redis key name.</param>
        </member>
        <member name="T:Babbacombe.Redis.Linq.RedisHashKey`1">
            <summary>
            Treats a Redis Hash Key as a Dictionary of objects with string keys.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`1.#ctor(StackExchange.Redis.IDatabase,System.String,Babbacombe.Redis.Linq.ISerializer{`0})">
            <summary>
            Opens a Redis hash key.
            </summary>
            <param name="database">The Redis database.</param>
            <param name="key">The Redis key name.</param>
            <param name="valueSerializer">Converts the value objects to and from strings. If null, a JsonSerializer is used.</param>
        </member>
        <member name="T:Babbacombe.Redis.Linq.RedisHashKey`2">
            <summary>
            Treats a Redis Hash Key as a Dictionary of objects with keys that are objects.
            </summary>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisHashKey`2.Database">
            <summary>
            The database containing the key
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisHashKey`2.Key">
            <summary>
            The Redis Key name.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.#ctor(StackExchange.Redis.IDatabase,System.String,Babbacombe.Redis.Linq.ISerializer{`0},Babbacombe.Redis.Linq.ISerializer{`1})">
            <summary>
            Opens a Redis hash key.
            </summary>
            <param name="database">The Redis database.</param>
            <param name="key">The Redis key name.</param>
            <param name="keySerializer">Converts the key objects to and from strings. If null, a JsonSerializer is used.</param>
            <param name="valueSerializer">Converts the value objects to and from strings. If null, a JsonSerializer is used.</param>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisHashKey`2.Keys">
            <summary>
            The keys within the Redis Hash key.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisHashKey`2.Values">
            <summary>
            The values within the Redis Hash key.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisHashKey`2.Count">
            <summary>
            The count of items within the Redis Hash key.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisHashKey`2.IsReadOnly">
            <summary>
            Always Read/Write.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisHashKey`2.Item(`0)">
            <summary>
            Sets or returns a value with the given key.
            </summary>
            <param name="key">The item key within the Redis key</param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.ContainsKey(`0)">
            <summary>
            True if the Redis Key contains an item with the given key.
            </summary>
            <param name="key">The item key within the Redis key.</param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.Add(`0,`1)">
            <summary>
            Adds the item to the Redis key.
            </summary>
            <param name="key">The item key within the Redis key.</param>
            <param name="value">The item to add.</param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.Remove(`0)">
            <summary>
            Removes any item with the given key from the Redis key.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to retrieve a value from the Redis key.
            </summary>
            <param name="key">The key of the item within the Redis key to retrieve.</param>
            <param name="value">The value retrieved, if present.</param>
            <returns>True if an item with the key exists within the Redis key.</returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the item to the Redis key.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.Clear">
            <summary>
            Deletes all of the items in the Redis Key.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Tests whether the item exists in the Redis key with a particular key.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key/value pairs from the Redis Key into an array.
            </summary>
            <param name="array">The array to copy the key/value pairs into.</param>
            <param name="arrayIndex">The index in array at which to start the copy.</param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the value from the Redis key if it is keyed on the given key.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisHashKey`2.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the key/value pairs in the Redis key.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Babbacombe.Redis.Linq.IRedisList`1">
            <summary>
            Interface implemented by RedisListKey and RedisSortedSetKey.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Babbacombe.Redis.Linq.IRedisList`1.Database">
            <summary>
            The Redis database.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.IRedisList`1.Key">
            <summary>
            The Redis Key name.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.IRedisList`1.Length">
            <summary>
            The number of values in the list.
            </summary>
        </member>
        <member name="T:Babbacombe.Redis.Linq.RedisListKey">
            <summary>
            Treats a Redis List Key as a list of string values.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey.#ctor(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            Opens a Redis List key.
            </summary>
            <param name="database">The Redis database.</param>
            <param name="key">The Redis Key name.</param>
        </member>
        <member name="T:Babbacombe.Redis.Linq.RedisListKey`1">
            <summary>
            Treats a Redis List Key as a list of objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisListKey`1.Database">
            <summary>
            The Redis database.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisListKey`1.Key">
            <summary>
            The Redis key name.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.#ctor(StackExchange.Redis.IDatabase,System.String,Babbacombe.Redis.Linq.ISerializer{`0})">
            <summary>
            Opens a Redis List Key.
            </summary>
            <param name="database">The Redis database.</param>
            <param name="key">The Redis key name.</param>
            <param name="serializer">Converts the objects to and from strings. If null, a JsonSerializer is used.</param>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisListKey`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given position.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisListKey`1.Count">
            <summary>
            Gets the number of items in the Redis List key.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisListKey`1.Length">
            <summary>
            Gets the number of items in the Redis List key.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisListKey`1.IsReadOnly">
            <summary>
            Always read/write.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.Add(`0)">
            <summary>
            Adds an item to the end of the Redis key.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.Clear">
            <summary>
            Removes all the items from the Redis key.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.Contains(`0)">
            <summary>
            Tests whether an item is in the Redis List key.
            </summary>
            <param name="item"></param>
            <returns>True if a matching object is found.</returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items from the Redis Key into an array.
            </summary>
            <param name="array">The array to copy the items into.</param>
            <param name="arrayIndex">The index in array at which to start the copy.</param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the objects in the Redis key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.IndexOf(`0)">
            <summary>
            Gets the index of the item in the Redis List key. -1 if not found.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the Redis List key at the specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.Remove(`0)">
            <summary>
            Removes the item from the Redis List key, if it is present.
            </summary>
            <param name="item"></param>
            <returns>True if an item was removed.</returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisListKey`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index in the Redis List key.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Babbacombe.Redis.Linq.IScorable">
            <summary>
            Interface that must be implemented by objects stored in a RedisSortedSetKey.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.IScorable.Score">
            <summary>
            Gets the score of the item.
            </summary>
        </member>
        <member name="T:Babbacombe.Redis.Linq.RedisSortedSetKey`1">
            <summary>
            Treats a Redis Sorted Set key as a list of objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Database">
            <summary>
            The Redis database.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Key">
            <summary>
            The Redis key name.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.#ctor(StackExchange.Redis.IDatabase,System.String,Babbacombe.Redis.Linq.ISerializer{`0})">
            <summary>
            Opens a Redis Sorted Set Key.
            </summary>
            <param name="database">The Redis database.</param>
            <param name="key">The Redis key name.</param>
            <param name="serializer">Converts the objects to and from strings. If null, a JsonSerializer is used.</param>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Count">
            <summary>
            Gets the number of items in the Redis Sorted Set key.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Length">
            <summary>
            Gets the number of items in the Redis Sorted Set key.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisSortedSetKey`1.IsReadOnly">
            <summary>
            Always read/write.
            </summary>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given position.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Item(System.Double)">
            <summary>
            Gets the item with the given score. If there is more than one item, the first is returned.
            </summary>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Add(`0)">
            <summary>
            Adds an item to the Redis Sorted Set key.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.AddOrReplace(`0)">
            <summary>
            Adds an item to the Redis Sorted Set key. If there is already an item with the same score, it is replaced.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a set of items to the Redis Sorted Set key.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.AddOrReplaceRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a set of items. Any existing items with the same scores are replaced.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Clear">
            <summary>
            Removes all the items from the Redis Sorted Set key.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Contains(`0)">
            <summary>
            Tests whether the item is in the Redis Sorted Set.
            </summary>
            <param name="item"></param>
            <returns>True if a matching object is found.</returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.ContainsScore(System.Double)">
            <summary>
            Tests whether an item with the given score is in the Redis Sorted Set.
            </summary>
            <param name="score"></param>
            <returns>True if a matching item is found.</returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.IndexOf(`0)">
            <summary>
            Gets the index of the item in the Redis Sorted Set key. -1 if not found.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Insert(System.Int32,`0)">
            <summary>
            Not implemented. Items can only be added, as the index depends on the item's score.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <exception cref="T:System.NotImplementedException">Always raised.</exception>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.Remove(`0)">
            <summary>
            Removes the item from the Redis Sorted Set key, if it is present.
            </summary>
            <param name="item"></param>
            <returns>True if an item was removed.</returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index in the Redis Sorted Set key.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items from the Redis Key into an array.
            </summary>
            <param name="array">The array to copy the items into.</param>
            <param name="arrayIndex">The index in array at which to start the copy.</param>
        </member>
        <member name="M:Babbacombe.Redis.Linq.RedisSortedSetKey`1.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the objects in the Redis key.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Babbacombe.Redis.Linq.ISerializer`1">
            <summary>
            Interface that must be implemented for serializer objects that convert between strings and the objects stored in RedisListKey, RedisHashKey, or RedisSortedSetKey collections.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Babbacombe.Redis.Linq.ISerializer`1.Serialize(`0)">
            <summary>
            Serializes an object into a string.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.ISerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes a string into an object.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Babbacombe.Redis.Linq.JsonSerializer`1">
            <summary>
            Serializer to convert JSON strings to objects, and vice versa.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Babbacombe.Redis.Linq.JsonSerializer`1.Serialize(`0)">
            <summary>
            Serializes an object into a JSON string.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.JsonSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes a JSON string into an object.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Babbacombe.Redis.Linq.StringSerializer">
            <summary>
            A null serializer that "converts" strings into strings.
            </summary>
        </member>
        <member name="M:Babbacombe.Redis.Linq.StringSerializer.Serialize(System.String)">
            <summary>
            Returns the passed in string.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Babbacombe.Redis.Linq.StringSerializer.Deserialize(System.String)">
            <summary>
            Returns the passed in string.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
    </members>
</doc>
